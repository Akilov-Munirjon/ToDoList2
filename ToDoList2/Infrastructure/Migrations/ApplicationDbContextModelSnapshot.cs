// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ToDoList2.Infrastructure.Contexts;

#nullable disable

namespace ToDoList2.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ToDoList2.Domain.Entities.CameraType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CameraTypes");
                });

            modelBuilder.Entity("ToDoList2.Domain.Entities.DisplayQuality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("DisplayQualityes");
                });

            modelBuilder.Entity("ToDoList2.Domain.Entities.Models.Battery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Batteries");
                });

            modelBuilder.Entity("ToDoList2.Domain.Entities.Models.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("ToDoList2.Domain.Entities.Models.Camera", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CameraTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CameraTypeId");

                    b.ToTable("Cameras");
                });

            modelBuilder.Entity("ToDoList2.Domain.Entities.Models.Connector", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Connectors");
                });

            modelBuilder.Entity("ToDoList2.Domain.Entities.Models.Cpu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Cpus");
                });

            modelBuilder.Entity("ToDoList2.Domain.Entities.Models.Display", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DisplayQualityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<float>("Size")
                        .HasColumnType("real");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DisplayQualityId");

                    b.ToTable("Displays");
                });

            modelBuilder.Entity("ToDoList2.Domain.Entities.Models.Memory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasFlashDrive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Memories");
                });

            modelBuilder.Entity("ToDoList2.Domain.Entities.Models.Os", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Os");
                });

            modelBuilder.Entity("ToDoList2.Domain.Entities.Models.Phone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BatteryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CameraId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CpuId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CpuId1")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DisplayId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MemoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("OsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SimTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BatteryId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CameraId");

                    b.HasIndex("CpuId");

                    b.HasIndex("CpuId1");

                    b.HasIndex("DisplayId");

                    b.HasIndex("MemoryId");

                    b.HasIndex("OsId");

                    b.HasIndex("SimTypeId");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("ToDoList2.Domain.Entities.Models.SimType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SimTypes");
                });

            modelBuilder.Entity("ToDoList2.Domain.Entities.PhoneConnector", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConnectorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PhoneId")
                        .HasMaxLength(100)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ConnectorId");

                    b.HasIndex("PhoneId");

                    b.ToTable("PhoneConnector");
                });

            modelBuilder.Entity("ToDoList2.Domain.Entities.Models.Camera", b =>
                {
                    b.HasOne("ToDoList2.Domain.Entities.CameraType", "CameraType")
                        .WithMany("Cameras")
                        .HasForeignKey("CameraTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CameraType");
                });

            modelBuilder.Entity("ToDoList2.Domain.Entities.Models.Display", b =>
                {
                    b.HasOne("ToDoList2.Domain.Entities.DisplayQuality", null)
                        .WithMany("Displays")
                        .HasForeignKey("DisplayQualityId");
                });

            modelBuilder.Entity("ToDoList2.Domain.Entities.Models.Phone", b =>
                {
                    b.HasOne("ToDoList2.Domain.Entities.Models.Battery", "Battery")
                        .WithMany("Phones")
                        .HasForeignKey("BatteryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToDoList2.Domain.Entities.Models.Brand", "Brand")
                        .WithMany("Phones")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToDoList2.Domain.Entities.Models.Camera", "Camera")
                        .WithMany("Phones")
                        .HasForeignKey("CameraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToDoList2.Domain.Entities.Models.Cpu", "Cpu")
                        .WithMany()
                        .HasForeignKey("CpuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToDoList2.Domain.Entities.Models.Cpu", null)
                        .WithMany("Phones")
                        .HasForeignKey("CpuId1");

                    b.HasOne("ToDoList2.Domain.Entities.Models.Display", "Display")
                        .WithMany("Phones")
                        .HasForeignKey("DisplayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToDoList2.Domain.Entities.Models.Memory", "Memory")
                        .WithMany("Phones")
                        .HasForeignKey("MemoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToDoList2.Domain.Entities.Models.Os", "Os")
                        .WithMany("Phones")
                        .HasForeignKey("OsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToDoList2.Domain.Entities.Models.SimType", "SimType")
                        .WithMany("Phones")
                        .HasForeignKey("SimTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Battery");

                    b.Navigation("Brand");

                    b.Navigation("Camera");

                    b.Navigation("Cpu");

                    b.Navigation("Display");

                    b.Navigation("Memory");

                    b.Navigation("Os");

                    b.Navigation("SimType");
                });

            modelBuilder.Entity("ToDoList2.Domain.Entities.PhoneConnector", b =>
                {
                    b.HasOne("ToDoList2.Domain.Entities.Models.Connector", "Connector")
                        .WithMany("PhoneConnector")
                        .HasForeignKey("ConnectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToDoList2.Domain.Entities.Models.Phone", "Phone")
                        .WithMany("PhoneConnector")
                        .HasForeignKey("PhoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Connector");

                    b.Navigation("Phone");
                });

            modelBuilder.Entity("ToDoList2.Domain.Entities.CameraType", b =>
                {
                    b.Navigation("Cameras");
                });

            modelBuilder.Entity("ToDoList2.Domain.Entities.DisplayQuality", b =>
                {
                    b.Navigation("Displays");
                });

            modelBuilder.Entity("ToDoList2.Domain.Entities.Models.Battery", b =>
                {
                    b.Navigation("Phones");
                });

            modelBuilder.Entity("ToDoList2.Domain.Entities.Models.Brand", b =>
                {
                    b.Navigation("Phones");
                });

            modelBuilder.Entity("ToDoList2.Domain.Entities.Models.Camera", b =>
                {
                    b.Navigation("Phones");
                });

            modelBuilder.Entity("ToDoList2.Domain.Entities.Models.Connector", b =>
                {
                    b.Navigation("PhoneConnector");
                });

            modelBuilder.Entity("ToDoList2.Domain.Entities.Models.Cpu", b =>
                {
                    b.Navigation("Phones");
                });

            modelBuilder.Entity("ToDoList2.Domain.Entities.Models.Display", b =>
                {
                    b.Navigation("Phones");
                });

            modelBuilder.Entity("ToDoList2.Domain.Entities.Models.Memory", b =>
                {
                    b.Navigation("Phones");
                });

            modelBuilder.Entity("ToDoList2.Domain.Entities.Models.Os", b =>
                {
                    b.Navigation("Phones");
                });

            modelBuilder.Entity("ToDoList2.Domain.Entities.Models.Phone", b =>
                {
                    b.Navigation("PhoneConnector");
                });

            modelBuilder.Entity("ToDoList2.Domain.Entities.Models.SimType", b =>
                {
                    b.Navigation("Phones");
                });
#pragma warning restore 612, 618
        }
    }
}
